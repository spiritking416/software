using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Collector;
// using LineDevice;

using PLC;



namespace SCADA
{
    public partial class PlcForm : Form
    {
       PLC_MITSUBISHI_HNC8 plc ;   
        //1.声明自适应类
//        AutoSizeFormClass asc = new AutoSizeFormClass();
       public static IntPtr PLCPtr;
       #region  HNC8 PLC按钮设置
       public String[] PLCStationNameArr = { "线头上料", "线头下料", "1站", "2站", "3站", "4站", "5站", "6站", "7站", "8站", "9站", "10站", "11站" };
//        int PLCStationButtonNameArr1Lenth = 13;
       int PLCStationButtonNameArr2Lenth = 27;
       public static String[,] PLCStationButtonNameArr = new String[13, 27] { 
                                                                { 
                                                                    "AGV上料请求=R800.0;", 
                                                                    "AGV上料完成=R800.1;", 
                                                                    "规整气缸伸出=R800.2;规整气缸伸出到位=R1.1",
                                                                    "规整气缸缩回=R800.3;规整气缸缩回到位=R1.2",
                                                                    "阻挡气缸伸出=R800.4;阻挡气缸伸出到位=R1.5", 
                                                                    "阻挡气缸缩回=R800.5;阻挡气缸缩回到位=R1.6",
                                                                    "机器人急停=Y3.0;机器人故障状态=X3.7",
                                                                    "机器人停止=Y3.1;机器人手爪异常=X4.0",
                                                                    "机器人启动=Y3.2;机器人运行状态=X4.1",
                                                                    "机器人继续=Y3.3;机器人运行保护=X4.2",
                                                                    "机器人暂停=Y3.4;机器人暂停状态=X4.3",
                                                                    "","","","","","","","","","","","","","",
                                                                    "复位=R801.1;复位=R801.1",
                                                                    "上料Rob切入/切出=R801.0;上料Rob切入/切出=R801.0"
                                                                },//线头上料
                                                                { 
                                                                    "AGV收料请求=R803.0;", 
                                                                    "AGV收料完成=R803.1;", 
                                                                    "规整气缸伸出=R803.2;规整气缸伸出到位=R5.3", 
                                                                    "规整气缸缩回=R803.3;规整气缸缩回到位=R5.4",
                                                                    "阻挡气缸组1伸出=R803.4;阻挡气缸组1伸出到位=R540.5",
                                                                    "阻挡气缸组1缩回=R803.5;阻挡气缸组1缩回到位=R540.6",
                                                                    "阻挡气缸组2伸出=R803.6;阻挡气缸组2伸出到位=R540.7",
                                                                    "阻挡气缸组2缩回=R803.7;阻挡气缸组2缩回到位=R541.0",
                                                                    "阻挡气缸组3伸出=R804.0;阻挡气缸组3伸出到位=R541.1", 
                                                                    "阻挡气缸组3缩回=R804.1;阻挡气缸组3缩回到位=R541.2",
                                                                    "顶升3顶升机构夹紧=R804.2;顶升3顶升机构夹紧到位=R7.1",
                                                                    "顶升3顶升机构松开=R804.3;顶升3顶升机构松开到位=R7.2", 
                                                                    "阻挡气缸上升=R804.4;阻挡气缸上升状态=R7.0",      
                                                                    "阻挡气缸下降=R804.5;阻挡气缸下降状态=R6.7",
                                                                    "设置码垛最高层数=P103;设置码垛最高层数=P103",//1到10
                                                                    ";码垛当前层数=R300",
                                                                    "机器人急停=Y5.0;机器人故障状态=X5.6",      
                                                                    "机器人停止=Y5.1;机器人手爪异常=X5.7",
                                                                    "机器人启动=Y5.2;机器人运行状态=X6.0",
                                                                    "机器人继续=Y5.3;机器人运行保护=X6.1",
                                                                    "机器人暂停=Y5.4;机器人暂停状态=X6.2",
                                                                    "","","",
                                                                    "产能清零=R805.2;产能清零=R805.2",
                                                                    "复位=R805.1;复位=R805.1",
                                                                    "下料Rob切入/切出=R805.0;下料Rob切入/切出=R805.0"
                                                                },//线头下料
                                                                { 
                                                                    "上料带启动/停止=R806.0;上料带运行状态=X12.7", 
                                                                    "下料带启动/停止=R806.1;下料带运行状态=X13.6", 
                                                                    "阻挡气缸上升=R806.2;阻挡气缸上升状态=X10.3",
                                                                    "阻挡气缸下降=R806.3;阻挡气缸下降状态=X10.2",
                                                                   "顶升机构1上升=R806.4;顶升机构1上升状态=R11.1",
                                                                   "顶升机构1下降=R806.5;顶升机构1下降状态=R11.0",
                                                                   "顶升机构1夹紧=R806.6;顶升机构1夹紧状态=R11.2",
                                                                   "顶升机构1松开=R806.7;顶升机构1松开状态=R11.3",
                                                                   "顶升机构2上升=R807.0;顶升机构2上升状态=R11.4", 
                                                                   "顶升机构2下降=R807.1;顶升机构2下降状态=R11.5",
                                                                    "顶升机构2夹紧=R807.2;顶升机构2夹紧状态=R11.6",
                                                                    "顶升机构2松开=R807.3;顶升机构2松开状态=R11.7",
                                                                    ";顶升1有料盘=R345.5", ";顶升2有料盘=R345.6",   
                                                                    "机器人急停=Y20.0;机器人故障状态=X20.0",
                                                                    "机器人停止=Y20.1;机器人手爪异常=X20.1",
                                                                    "机器人启动=Y20.2;机器人运行状态=X20.2",      
                                                                    "机器人继续=Y20.3;机器人运行保护=X20.3",
                                                                    "机器人暂停=Y20.4;机器人暂停状态=X20.4",
                                                                    ";显示加工夹位=P1",";E01机台联机=X14.1",
                                                                    ";E02机台联机=X16.1",
                                                                    "是否1出2=R25.5;是否1出2=R25.5",
                                                                    "是否清洗=R25.6;是否清洗=R25.6",
                                                                    "E01切入/切出=R808.0;E01切入/切出=R808.0",
                                                                    "E02切入/切出=R808.1;E02切入/切出=R808.1",
                                                                    "1#Rob切入/切出=R808.2;1#Rob切入/切出=R808.2"
                                                                },//1站
                                                                { 
                                                                    "上料带启动/停止=R809.0;上料带运行状态=X32.7",
                                                                    "下料带启动/停止=R809.1;下料带运行状态=X33.6",
                                                                    "阻挡气缸上升=R809.2;阻挡气缸上升状态=X30.3",
                                                                    "阻挡气缸下降=R809.3;阻挡气缸下降状态=X30.2",
                                                                   "顶升机构1上升=R809.4;顶升机构1上升状态=R31.1", 
                                                                   "顶升机构1下降=R809.5;顶升机构1下降状态=R31.0",
                                                                   "顶升机构1夹紧=R809.6;顶升机构1夹紧状态=R31.2",
                                                                   "顶升机构1松开=R809.7;顶升机构1松开状态=R31.3",
                                                                   "顶升机构2上升=R810.0;顶升机构2上升状态=R31.4", 
                                                                   "顶升机构2下降=R810.1;顶升机构2下降状态=R31.5",
                                                                    "顶升机构2夹紧=R810.2;顶升机构2夹紧状态=R31.6",
                                                                    "顶升机构2松开=R810.3;顶升机构2松开状态=R31.7", 
                                                                    ";顶升1有料盘=R365.5", 
                                                                    ";顶升2有料盘=R365.6",   
                                                                    "机器人急停=Y40.0;机器人故障状态=X40.0",
                                                                    "机器人停止=Y40.1;机器人手爪异常=X40.1",
                                                                    "机器人启动=Y40.2;机器人运行状态=X40.2",      
                                                                    "机器人继续=Y40.3;机器人运行保护=X40.3",
                                                                    "机器人暂停=Y40.4;机器人暂停状态=X40.4",
                                                                    ";显示加工夹位=P2",
                                                                    ";E03机台联机=X34.1",
                                                                    ";E04机台联机=X36.1",
                                                                    "是否1出2=R45.5;是否1出2=R45.5",
                                                                    "是否清洗=R45.6;是否清洗=R45.6",        
                                                                    "E03切入/切出=R811.0;E03切入/切出=R811.0",
                                                                    "E04切入/切出=R811.1;E04切入/切出=R811.1",
                                                                    "2#Rob切入/切出=R811.2;2#Rob切入/切出=R811.2"
                                                                },//2站
                                                                { 
                                                                    "上料带启动/停止=R812.0;上料带运行状态=X52.7", 
                                                                    "下料带启动/停止=R812.1;下料带运行状态=X53.6", 
                                                                    "阻挡气缸上升=R812.2;阻挡气缸上升状态=X50.3",
                                                                    "阻挡气缸下降=R812.3;阻挡气缸下降状态=X50.2",
                                                                   "顶升机构1上升=R812.4;顶升机构1上升状态=R51.1", 
                                                                   "顶升机构1下降=R812.5;顶升机构1下降状态=R51.0",
                                                                   "顶升机构1夹紧=R812.6;顶升机构1夹紧状态=R51.2",
                                                                   "顶升机构1松开=R812.7;顶升机构1松开状态=R51.3",
                                                                   "顶升机构2上升=R813.0;顶升机构2上升状态=R51.4", 
                                                                   "顶升机构2下降=R813.1;顶升机构2下降状态=R51.5",
                                                                    "顶升机构2夹紧=R813.2;顶升机构2夹紧状态=R51.6",
                                                                    "顶升机构2松开=R813.3;顶升机构2松开状态=R51.7",
                                                                    ";顶升1有料盘=R385.5",
                                                                    ";顶升2有料盘=R385.6",   
                                                                    "机器人急停=Y60.0;机器人故障状态=X60.0",
                                                                    "机器人停止=Y60.1;机器人手爪异常=X60.1",
                                                                    "机器人启动=Y60.2;机器人运行状态=X60.2",      
                                                                    "机器人继续=Y60.3;机器人运行保护=X60.3",
                                                                    "机器人暂停=Y60.4;机器人暂停状态=X60.4", 
                                                                    ";显示加工夹位=P3",";E05机台联机=X54.1",
                                                                    ";E06机台联机=X56.1",
                                                                    "是否1出2=R65.5;是否1出2=R65.5",
                                                                    "是否清洗=R65.6;是否清洗=R65.6",
                                                                    "E05切入/切出=R814.0;E05切入/切出=R814.0",
                                                                    "E06切入/切出=R814.1;E06切入/切出=R814.1",
                                                                    "3#Rob切入/切出=R814.2;3#Rob切入/切出=R814.2"
                                                                },//3站
                                                                {
                                                                    "上料带启动/停止=R815.0;上料带运行状态=X72.7", 
                                                                    "下料带启动/停止=R815.1;下料带运行状态=X73.6",
                                                                    "阻挡气缸上升=R815.2;阻挡气缸上升状态=X70.3", 
                                                                    "阻挡气缸下降=R815.3;阻挡气缸下降状态=X70.2",
                                                                   "顶升机构1上升=R815.4;顶升机构1上升状态=R71.1",
                                                                   "顶升机构1下降=R815.5;顶升机构1下降状态=R71.0",
                                                                   "顶升机构1夹紧=R815.6;顶升机构1夹紧状态=R71.2",
                                                                   "顶升机构1松开=R815.7;顶升机构1松开状态=R71.3",
                                                                   "顶升机构2上升=R816.0;顶升机构2上升状态=R71.4", 
                                                                   "顶升机构2下降=R816.1;顶升机构2下降状态=R71.5",
                                                                    "顶升机构2夹紧=R816.2;顶升机构2夹紧状态=R71.6",
                                                                    "顶升机构2松开=R816.3;顶升机构2松开状态=R71.7", 
                                                                    ";顶升1有料盘=R405.5",
                                                                    ";顶升2有料盘=R405.6",   
                                                                    "机器人急停=Y80.0;机器人故障状态=X80.0",
                                                                    "机器人停止=Y80.1;机器人手爪异常=X80.1",
                                                                    "机器人启动=Y80.2;机器人运行状态=X80.2",      
                                                                    "机器人继续=Y80.3;机器人运行保护=X80.3",
                                                                    "机器人暂停=Y80.4;机器人暂停状态=X80.4", 
                                                                    ";显示加工夹位=P4",";E07机台联机=X74.1",
                                                                    ";E08机台联机=X76.1",
                                                                    "是否1出2=R85.5;是否1出2=R85.5",
                                                                    "是否清洗=R85.6;是否清洗=R85.6",
                                                                    "E07切入/切出=R817.0;E07切入/切出=R817.0",
                                                                    "E08切入/切出=R817.1;E08切入/切出=R817.1",
                                                                    "4#Rob切入/切出=R817.2;4#Rob切入/切出=R817.2"
                                                                },//4站
                                                                { 
                                                                    "上料带启动/停止=R818.0;上料带运行状态=X92.7",
                                                                    "下料带启动/停止=R818.1;下料带运行状态=X93.6",
                                                                    "阻挡气缸上升=R818.2;阻挡气缸上升状态=X90.3",
                                                                    "阻挡气缸下降=R818.3;阻挡气缸下降状态=X90.2",
                                                                    "顶升机构1上升=R818.4;顶升机构1上升状态=R91.1",
                                                                    "顶升机构1下降=R818.5;顶升机构1下降状态=R91.0",
                                                                    "顶升机构1夹紧=R818.6;顶升机构1夹紧状态=R91.2",
                                                                    "顶升机构1松开=R818.7;顶升机构1松开状态=R91.3",
                                                                    "顶升机构2上升=R819.0;顶升机构2上升状态=R91.4",
                                                                    "顶升机构2下降=R819.1;顶升机构2下降状态=R91.5",
                                                                    "顶升机构2夹紧=R819.2;顶升机构2夹紧状态=R91.6",
                                                                    "顶升机构2松开=R819.3;顶升机构2松开状态=R91.7",
                                                                    ";顶升1有料盘=R425.5",
                                                                    ";顶升2有料盘=R425.6",
                                                                    "机器人急停=Y100.0;机器人故障状态=X100.0",
                                                                    "机器人停止=Y100.1;机器人手爪异常=X100.1",
                                                                    "机器人启动=Y100.2;机器人运行状态=X100.2",
                                                                    "机器人继续=Y100.3;机器人运行保护=X100.3",
                                                                    "机器人暂停=Y100.4;机器人暂停状态=X100.4",
                                                                    ";显示加工夹位=P5",
                                                                    ";E09机台联机=X94.1",
                                                                    ";E10机台联机=X96.1",
                                                                    "是否1出2=R105.5;是否1出2=R105.5",
                                                                    "是否清洗=R105.6;是否清洗=R105.6",
                                                                    "E09切入/切出=R820.0;E09切入/切出=R820.0",
                                                                    "E10切入/切出=R820.1;E10切入/切出=R820.1",
                                                                    "5#Rob切入/切出=R820.2;5#Rob切入/切出=R820.2"
                                                                },//5站
                                                                {
                                                                    "上料带启动/停止=R821.0;上料带运行状态=X112.7",
                                                                    "下料带启动/停止=R821.1;下料带运行状态=X113.6",
                                                                    "阻挡气缸上升=R821.2;阻挡气缸上升状态=X110.3",
                                                                    "阻挡气缸下降=R821.3;阻挡气缸下降状态=X110.2",
                                                                    "顶升机构1上升=R821.4;顶升机构1上升状态=R111.1",
                                                                    "顶升机构1下降=R821.5;顶升机构1下降状态=R111.0",
                                                                    "顶升机构1夹紧=R821.6;顶升机构1夹紧状态=R111.2",
                                                                    "顶升机构1松开=R821.7;顶升机构1松开状态=R111.3",
                                                                    "顶升机构2上升=R822.0;顶升机构2上升状态=R111.4",
                                                                    "顶升机构2下降=R822.1;顶升机构2下降状态=R111.5",
                                                                    "顶升机构2夹紧=R822.2;顶升机构2夹紧状态=R111.6",
                                                                    "顶升机构2松开=R822.3;顶升机构2松开状态=R111.7",
                                                                    ";顶升1有料盘=R445.5",
                                                                    ";顶升2有料盘=R445.6",
                                                                    "机器人急停=Y120.0;机器人故障状态=X120.0",
                                                                    "机器人停止=Y120.1;机器人手爪异常=X120.1",
                                                                    "机器人启动=Y120.2;机器人运行状态=X120.2",
                                                                    "机器人继续=Y120.3;机器人运行保护=X120.3",
                                                                    "机器人暂停=Y120.4;机器人暂停状态=X120.4",
                                                                    ";显示加工夹位=P6",
                                                                    ";E11机台联机=X114.1",
                                                                    ";E12机台联机=X116.1",
                                                                    "是否1出2=R125.5;是否1出2=R125.5",
                                                                    "是否清洗=R125.6;是否清洗=R125.6",
                                                                    "E11切入/切出=R823.0;E11切入/切出=R823.0",
                                                                    "E12切入/切出=R823.1;E12切入/切出=R823.1",
                                                                    "6#Rob切入/切出=R823.2;6#Rob切入/切出=R823.2"
                                                                },//6站

                                                                { 
                                                                    "上料带启动/停止=R824.0;上料带运行状态=X132.7",
                                                                    "下料带启动/停止=R824.1;下料带运行状态=X133.6",
                                                                    "阻挡气缸上升=R824.2;阻挡气缸上升状态=X130.3",
                                                                    "阻挡气缸下降=R824.3;阻挡气缸下降状态=X130.2",
                                                                    "顶升机构1上升=R824.4;顶升机构1上升状态=R131.1",
                                                                    "顶升机构1下降=R824.5;顶升机构1下降状态=R131.0",
                                                                    "顶升机构1夹紧=R824.6;顶升机构1夹紧状态=R131.2",
                                                                    "顶升机构1松开=R824.7;顶升机构1松开状态=R131.3",
                                                                    "顶升机构2上升=R825.0;顶升机构2上升状态=R131.4",
                                                                    "顶升机构2下降=R825.1;顶升机构2下降状态=R131.5",
                                                                    "顶升机构2夹紧=R825.2;顶升机构2夹紧状态=R131.6",
                                                                    "顶升机构2松开=R825.3;顶升机构2松开状态=R131.7",
                                                                    ";顶升1有料盘=R465.5",
                                                                    ";顶升2有料盘=R465.6",
                                                                    "机器人急停=Y140.0;机器人故障状态=X160.0",
                                                                    "机器人停止=Y140.1;机器人手爪异常=X160.1",
                                                                    "机器人启动=Y140.2;机器人运行状态=X160.2",
                                                                    "机器人继续=Y140.3;机器人运行保护=X160.3",
                                                                    "机器人暂停=Y140.4;机器人暂停状态=X160.4",
                                                                    ";显示加工夹位=P7",
                                                                    ";E13机台联机=X134.1",
                                                                    ";E14机台联机=X136.1",
                                                                    "是否1出2=R145.5;是否1出2=R145.5",
                                                                    "是否清洗=R145.6;是否清洗=R145.6",
                                                                    "E13切入/切出=R826.0;E13切入/切出=R826.0",
                                                                    "E14切入/切出=R826.1;E14切入/切出=R826.1",
                                                                    "7#Rob切入/切出=R826.2;7#Rob切入/切出=R826.2"
                                                                },//7站

                                                                { 
                                                                    "上料带启动/停止=R827.0;上料带运行状态=X152.7",
                                                                    "下料带启动/停止=R827.1;下料带运行状态=X153.6",
                                                                    "阻挡气缸上升=R827.2;阻挡气缸上升状态=X150.3",
                                                                    "阻挡气缸下降=R827.3;阻挡气缸下降状态=X150.2",
                                                                    "顶升机构1上升=R827.4;顶升机构1上升状态=R151.1",
                                                                    "顶升机构1下降=R827.5;顶升机构1下降状态=R151.0",
                                                                    "顶升机构1夹紧=R827.6;顶升机构1夹紧状态=R151.2",
                                                                    "顶升机构1松开=R827.7;顶升机构1松开状态=R151.3",
                                                                    "顶升机构2上升=R828.0;顶升机构2上升状态=R151.4",
                                                                    "顶升机构2下降=R828.1;顶升机构2下降状态=R151.5",
                                                                    "顶升机构2夹紧=R828.2;顶升机构2夹紧状态=R151.6",
                                                                    "顶升机构2松开=R828.3;顶升机构2松开状态=R151.7",
                                                                    ";顶升1有料盘=R485.5",
                                                                    ";顶升2有料盘=R485.6",
                                                                    "机器人急停=Y160.0;机器人故障状态=X160.0",
                                                                    "机器人停止=Y160.1;机器人手爪异常=X160.1",
                                                                    "机器人启动=Y160.2;机器人运行状态=X160.2",
                                                                    "机器人继续=Y160.3;机器人运行保护=X160.3",
                                                                    "机器人暂停=Y160.4;机器人暂停状态=X160.4",
                                                                    ";显示加工夹位=P8",
                                                                    ";E15机台联机=X154.1",
                                                                    ";E16机台联机=X156.1",
                                                                    "是否1出2=R165.5;是否1出2=R165.5",
                                                                    "是否清洗=R165.6;是否清洗=R165.6",
                                                                    "E15切入/切出=R829.0;E15切入/切出=R829.0",
                                                                    "E16切入/切出=R829.1;E16切入/切出=R829.1",
                                                                    "8#Rob切入/切出=R829.2;8#Rob切入/切出=R829.2"
                                                                },//8站

                                                                {
                                                                    "上料带启动/停止=R830.0;上料带运行状态=X172.7",
                                                                    "下料带启动/停止=R830.1;下料带运行状态=X173.6",
                                                                    "阻挡气缸上升=R830.2;阻挡气缸上升状态=X170.3",
                                                                    "阻挡气缸下降=R830.3;阻挡气缸下降状态=X170.2",
                                                                    "顶升机构1上升=R830.4;顶升机构1上升状态=R171.1",
                                                                    "顶升机构1下降=R830.5;顶升机构1下降状态=R171.0",
                                                                    "顶升机构1夹紧=R830.6;顶升机构1夹紧状态=R171.2",
                                                                    "顶升机构1松开=R830.7;顶升机构1松开状态=R171.3",
                                                                    "顶升机构2上升=R831.0;顶升机构2上升状态=R171.4",
                                                                    "顶升机构2下降=R831.1;顶升机构2下降状态=R171.5",
                                                                    "顶升机构2夹紧=R831.2;顶升机构2夹紧状态=R171.6",
                                                                    "顶升机构2松开=R831.3;顶升机构2松开状态=R171.7",
                                                                    ";顶升1有料盘=R505.5",
                                                                    ";顶升2有料盘=R505.6",
                                                                    "机器人急停=Y180.0;机器人故障状态=X180.0",
                                                                    "机器人停止=Y180.1;机器人手爪异常=X180.1",
                                                                    "机器人启动=Y180.2;机器人运行状态=X180.2",
                                                                    "机器人继续=Y180.3;机器人运行保护=X180.3",
                                                                    "机器人暂停=Y180.4;机器人暂停状态=X180.4",
                                                                    ";显示加工夹位=P9",
                                                                    ";E17机台联机=X174.1",
                                                                    ";E18机台联机=X176.1",
                                                                    "是否1出2=R185.5;是否1出2=R185.5",
                                                                    "是否清洗=R185.6;是否清洗=R185.6",
                                                                    "E17切入/切出=R832.0;E17切入/切出=R832.0",
                                                                    "E18切入/切出=R832.1;E18切入/切出=R832.1",
                                                                    "9#Rob切入/切出=R832.2;9#Rob切入/切出=R832.2"
                                                                },//9站

                                                                {
                                                                    "上料带启动/停止=R833.0;上料带运行状态=X192.7",
                                                                    "下料带启动/停止=R833.1;下料带运行状态=X193.6",
                                                                    "阻挡气缸上升=R833.2;阻挡气缸上升状态=X190.3",
                                                                    "阻挡气缸下降=R833.3;阻挡气缸下降状态=X190.2",
                                                                    "顶升机构1上升=R833.4;顶升机构1上升状态=R191.1",
                                                                    "顶升机构1下降=R833.5;顶升机构1下降状态=R191.0",
                                                                    "顶升机构1夹紧=R833.6;顶升机构1夹紧状态=R191.2",
                                                                    "顶升机构1松开=R833.7;顶升机构1松开状态=R191.3",
                                                                    "顶升机构2上升=R834.0;顶升机构2上升状态=R191.4",
                                                                    "顶升机构2下降=R834.1;顶升机构2下降状态=R191.5",
                                                                    "顶升机构2夹紧=R834.2;顶升机构2夹紧状态=R191.6",
                                                                    "顶升机构2松开=R834.3;顶升机构2松开状态=R191.7",
                                                                    ";顶升1有料盘=R325.5",
                                                                    ";顶升2有料盘=R325.6",
                                                                    "机器人急停=Y200.0;机器人故障状态=X200.0",
                                                                    "机器人停止=Y200.1;机器人手爪异常=X200.1",
                                                                    "机器人启动=Y200.2;机器人运行状态=X200.2",
                                                                    "机器人继续=Y200.3;机器人运行保护=X200.3",
                                                                    "机器人暂停=Y200.4;机器人暂停状态=X200.4",
                                                                    ";显示加工夹位=P10",
                                                                    ";E19机台联机=X194.1",
                                                                    ";E20机台联机=X196.1",
                                                                    "是否1出2=R205.5;是否1出2=R205.5",
                                                                    "是否清洗=R205.6;是否清洗=R205.6",
                                                                    "E19切入/切出=R835.0;E19切入/切出=R835.0",
                                                                    "E20切入/切出=R835.1;E20切入/切出=R835.1",
                                                                    "10#Rob切入/切出=R835.2;10#Rob切入/切出=R835.2"
                                                                },//10站

                                                                {
                                                                    "上料带启动/停止=R836.0;上料带运行状态=X212.7",
                                                                    "下料带启动/停止=R836.1;下料带运行状态=X213.6",
                                                                    "阻挡气缸上升=R836.2;阻挡气缸上升状态=X210.3",
                                                                    "阻挡气缸下降=R836.3;阻挡气缸下降状态=X210.2",
                                                                    "顶升机构1上升=R836.4;顶升机构1上升状态=R211.1",
                                                                    "顶升机构1下降=R836.5;顶升机构1下降状态=R211.0",
                                                                    "顶升机构1夹紧=R836.6;顶升机构1夹紧状态=R211.2",
                                                                    "顶升机构1松开=R836.7;顶升机构1松开状态=R211.3",
                                                                    "顶升机构2上升=R837.0;顶升机构2上升状态=R211.4",
                                                                    "顶升机构2下降=R837.1;顶升机构2下降状态=R211.5",
                                                                    "顶升机构2夹紧=R837.2;顶升机构2夹紧状态=R211.6",
                                                                    "顶升机构2松开=R837.3;顶升机构2松开状态=R211.7",
                                                                    ";顶升1有料盘=R525.5",
                                                                    ";顶升2有料盘=R525.6",
                                                                    "机器人急停=Y220.0;机器人故障状态=X220.0",
                                                                    "机器人停止=Y220.1;机器人手爪异常=X220.1",
                                                                    "机器人启动=Y220.2;机器人运行状态=X220.2",
                                                                    "机器人继续=Y220.3;机器人运行保护=X220.3",
                                                                    "机器人暂停=Y220.4;机器人暂停状态=X220.4",
                                                                    ";显示加工夹位=P11",
                                                                    ";E15机台联机=X214.1",
                                                                    ";E16机台联机=X216.1",
                                                                    "是否1出2=R225.5;是否1出2=R225.5",
                                                                    "是否清洗=R225.6;是否清洗=R225.6",
                                                                    "E21切入/切出=R838.0;E21切入/切出=R838.0",
                                                                    "E22切入/切出=R838.1;E22切入/切出=R838.1",
                                                                    "11#Rob切入/切出=R838.2;11#Rob切入/切出=R838.2"
                                                                },//11站

       };
       OperationButton[] OperationButtonArr = null;
       #endregion

       public PlcForm()
       {
           InitializeComponent();
           comboBox_PLCStationSelet.Visible = false;
           for (int ii = 0; ii < PLCStationButtonNameArr2Lenth; ii++)
           {
               String buttonName = "button" + (ii + 1).ToString();
               foreach (Control item in this.flowLayoutPanel1.Controls)//将界面上的按钮隐藏
               {
                   if (buttonName == item.Name)
                   {
                       item.Visible = false;
                   }
               }
           }

           if (PLCDataShare.m_plclist != null && PLCDataShare.m_plclist.Count > 0 && PLCDataShare.m_plclist[0].system == m_xmlDociment.PLC_System[1])//HNC8
           {
               comboBox_PLCStationSelet.Visible = true;
               OperationButtonArr = new OperationButton[PLCStationButtonNameArr2Lenth];
               for (int ii = 0; ii < PLCStationButtonNameArr2Lenth; ii++)
               {
                   String buttonName = "button" + (ii + 1).ToString();
                   foreach (Control item in this.flowLayoutPanel1.Controls)
                   {
                       if (buttonName == item.Name)
                       {
                           OperationButton m_bt = new OperationButton((Button)item);
                           OperationButtonArr[ii] = m_bt;
                       }
                   }
               }
           }
           else
           {
               CurrentAlarm.Visible = false;
               HistoricalAlarm.Visible = false;
               dataGridViewalarmdata.Visible = false;
               button_alarmReFlesh.Visible = false;
           }

           label_PLCSysTemText.Text = "";

           plcDGV1.AllowUserToAddRows = false;
           plcDGV2.AllowUserToAddRows = false;
           dataGridViewalarmdata.AllowUserToAddRows = false;
       }


        private void AutoUpDataHandler(object sender, PlcEvent Args)
        {
//             if (plc == (PLC_MITSUBISHI_HNC8)sender)
//             {
//                 if (Args.Type == "State")
//                 {
//                     if (Args.Value == 1)//连接上
//                     {
// 
//                     }
//                     else if (Args.Value == 0)//掉线
//                     {
// 
//                     }
//                 }
//             }
        }


        /// <summary>
        /// 委托设置文本控件显示
        /// </summary>
        /// <param name="LB"></param>
        /// <param name="str"></param>
        private void ThreaSetLaBText(Label LB, String str)
        {
//             if (LB.Text != str)
            {
                if (LB.InvokeRequired)//等待异步
                {
                    // 当一个控件的InvokeRequired属性值为真时，说明有一个创建它以外的线程想访问它
                    Action<string> actionDelegate = (x) => { LB.Text = x; };
                    LB.Invoke(actionDelegate, str);
                }
                else
                {
                    LB.Text = str;
                }
            }
        }


        private void PlcForm_Load(object sender, EventArgs e)
        {
            //2.在PlcForm_Load中调用类初始化方法,记录控件和窗体的初始化位置和大小
//             asc.controllInitializeSize(this);

            switchPlc.Items.Clear();

            foreach (PLC_MITSUBISHI_HNC8 m_slplc in PLCDataShare.m_plclist)
            {
                string str = "PLC#";
                str += m_slplc.ID.ToString();
                switchPlc.Items.Add(str);
                m_slplc.AutoUpDataPLCDataHandler += new PLC.PLC_MITSUBISHI_HNC8.EventHandler<PLC.PlcEvent>(this.AutoUpDataHandler);
            }
            
            if (switchPlc.Items.Count != 0)
            {
                switchPlc.SelectedIndex = 0;
            }
            pictureBox_LinkState.Image = SCADA.Properties.Resources.top_bar_black;
            labelLinckText.Text = MainForm.UnLinckedText;


            radioButton_serjinzhi.Checked = true;
//             if (Localization.HasLang)
//             {
//                 Localization.RefreshLanguage(this);
//                 changeDGV();
//             }
            //设置信号列表内容
            PLCPtr = Handle;
            comboBox_PLCStationSelet.DataSource = PLCStationNameArr;
        }

        private void InitOperationButton(int Station)
        {
            for (int ii = 0; ii < PLCStationButtonNameArr2Lenth; ii++)
            {
                String[] str1 = PLCStationButtonNameArr[Station,ii].Split(';');
                if (str1.Length != 2)
                {
                    str1 = new String[2];
                }
                String[] str2 = new String[2]; 
                String[] str3 = new String[2];
                if (str1[0] != null && str1[0].Length > 0)
                {
                    str2 = str1[0].Split('=');
                    if (str2.Length != 2)
                    {
                        str2 = new String[2];
                    }
                }
                if (str1[1] != null && str1[1].Length > 0)
                {
                    str3 = str1[1].Split('=');
                    if (str3.Length != 2)
                    {
                        str3 = new String[2]; 
                    }
                }
                OperationButtonArr[ii].BindingHnc8Reg(str2[0], str2[1], str3[0], str3[1]);
            }
        }

        public System.Drawing.Image GerImage(string path)
        {
            System.IO.FileStream fs = new System.IO.FileStream(path, System.IO.FileMode.Open);
            byte[] bydata = new byte[fs.Length];
            fs.Read(bydata, 0, bydata.Length);
            fs.Close();
            System.IO.MemoryStream ms = new System.IO.MemoryStream(bydata);
            System.Drawing.Image img = System.Drawing.Image.FromStream(ms);
            return img;
        }

        private void switchPlc_SelectedIndexChanged(object sender, EventArgs e)
        {
            plc = PLCDataShare.m_plclist[switchPlc.SelectedIndex];
            if (plc.system == m_xmlDociment.PLC_System[0])//三菱PLC
            {
                comboBoxPLCJiankong1.DataSource = m_xmlDociment.Default_MITSUBISHI_Device1;
                comboBoxPLCJiankong2.DataSource = m_xmlDociment.Default_MITSUBISHI_Device2;
            }
            else if (plc.system == m_xmlDociment.PLC_System[1])//HNC8PLC
            {
                comboBoxPLCJiankong1.DataSource = m_xmlDociment.Default_HNC8_Device1;
                comboBoxPLCJiankong2.DataSource = m_xmlDociment.Default_HNC8_Device2;
            }
            label_PLCSysTemText.Text = plc.system;
        }

        /// <summary>
        /// 获取PLC信号并将其列表出来
        /// </summary>
        /// <param name="plc"></param>
        private void getPlcSingalList2plcDGV(String Device, System.Windows.Forms.DataGridView DGV,
            ref PLC_MITSUBISHI_HNC8.MITSUBISHISignalType[] MITSUBISHIPLC_SignalList_result, ref PLC_MITSUBISHI_HNC8.HNC8SignalType[] HNC8PLC_SignalList_result)
        {
            DGV.Rows.Clear();
            if (plc.system == m_xmlDociment.PLC_System[0])//三菱
            {
                if (MITSUBISHIPLC_SignalList_result != null)
                {
                    for (int ii = 1; ii < MITSUBISHIPLC_SignalList_result.Length;ii++ )
                    {
                        if (MITSUBISHIPLC_SignalList_result[ii].IsShow && MITSUBISHIPLC_SignalList_result[ii].ACTION_ID == "-1")
                        {
                            MITSUBISHIPLC_SignalList_result[ii].IsShow = false;
                        }
                    }
                }
                MITSUBISHIPLC_SignalList_result = plc.MITSUBISHIPLC_SignalList.Find(
                        delegate(PLC_MITSUBISHI_HNC8.MITSUBISHISignalType[] temp)
                        {
                            return String.Equals(temp[0].EQUIP_CODE, Device, StringComparison.Ordinal);
                        }
                        );

                if(MITSUBISHIPLC_SignalList_result != null)
                {
                    DGV.RowCount = MITSUBISHIPLC_SignalList_result.Length - 1;
                    for (int ii = 0; ii < DGV.RowCount; ii++)
                    {
                        if (MITSUBISHIPLC_SignalList_result[0].Address == 10)//10进制
                        {
                            DGV.Rows[ii].Cells[0].Value = Device + MITSUBISHIPLC_SignalList_result[ii + 1].Address;
                        }
                        else//十六进制
                        {
                            DGV.Rows[ii].Cells[0].Value = Device + "0x" + String.Format("{0:X}", MITSUBISHIPLC_SignalList_result[ii + 1].Address);
                        }
                        if (MITSUBISHIPLC_SignalList_result[ii + 1].SubAddress != -1)//位
                        {
                            DGV.Rows[ii].Cells[0].Value = DGV.Rows[ii].Cells[0].Value.ToString() + "." + MITSUBISHIPLC_SignalList_result[ii + 1].SubAddress.ToString();
                        }
                        DGV.Rows[ii].Cells[1].Value = MITSUBISHIPLC_SignalList_result[ii + 1].ArrLabel;
                        DGV.Rows[ii].Cells[2].Value = MITSUBISHIPLC_SignalList_result[ii + 1].Value;
                        if (MITSUBISHIPLC_SignalList_result[ii + 1].MonitoringFlg)
                        {
                            DGV.Rows[ii].Cells[3].Value = "是";
                        }
                        else
                        {
                            DGV.Rows[ii].Cells[3].Value = "否";
                        }
                        DGV.Rows[ii].Cells[4].Value = MITSUBISHIPLC_SignalList_result[ii + 1].EQUIP_CODE;
                        DGV.Rows[ii].Cells[5].Value = MITSUBISHIPLC_SignalList_result[ii + 1].ACTION_ID;

                        if (MITSUBISHIPLC_SignalList_result[ii + 1].ACTION_ID == "-1")//显示类型
                        {
                            MITSUBISHIPLC_SignalList_result[ii + 1].IsShow = false;//将所有的显示类型采集属性设置为false
                        }
                        else
                        {
                            MITSUBISHIPLC_SignalList_result[ii + 1].IsShow = true;
                        }
                        
                    }
                }
            }
            else if (plc.system == m_xmlDociment.PLC_System[1])//hnc8
            {
                if (HNC8PLC_SignalList_result != null)
                {
                    for (int ii = 1; ii < HNC8PLC_SignalList_result.Length; ii++)
                    {
                        if (HNC8PLC_SignalList_result[ii].IsShow && HNC8PLC_SignalList_result[ii].ACTION_ID == "-1")
                        {
                            HNC8PLC_SignalList_result[ii].IsShow = false;
                        }
                    }
                }

                HNC8PLC_SignalList_result = plc.HNC8PLC_SignalList.Find(
                        delegate(PLC_MITSUBISHI_HNC8.HNC8SignalType[] temp)
                        {
                            return String.Equals(temp[0].ArrLabel, Device, StringComparison.Ordinal);
                        }
                        );

                if (HNC8PLC_SignalList_result != null)//找到
                {
                    DGV.RowCount = HNC8PLC_SignalList_result.Length - 1;
                    for (int ii = 0; ii < DGV.RowCount; ii++)
                    {
                        if (HNC8PLC_SignalList_result[ii + 1].SubAddress == -1)//是值
                        {
                            DGV.Rows[ii].Cells[0].Value = HNC8PLC_SignalList_result[ii + 1].Address;
                        }
                        else
                        {
                            DGV.Rows[ii].Cells[0].Value = HNC8PLC_SignalList_result[ii + 1].Address.ToString() + "." + HNC8PLC_SignalList_result[ii + 1].SubAddress.ToString();
                        }
                        DGV.Rows[ii].Cells[1].Value = HNC8PLC_SignalList_result[ii + 1].ArrLabel;
                        DGV.Rows[ii].Cells[2].Value = HNC8PLC_SignalList_result[ii + 1].Value;
                        if (HNC8PLC_SignalList_result[ii + 1].MonitoringFlg)
                        {
                            DGV.Rows[ii].Cells[3].Value = "是";
                        }
                        else
                        {
                            DGV.Rows[ii].Cells[3].Value = "否";
                        }
                        DGV.Rows[ii].Cells[4].Value = HNC8PLC_SignalList_result[ii + 1].EQUIP_CODE;
                        DGV.Rows[ii].Cells[5].Value = HNC8PLC_SignalList_result[ii + 1].ACTION_ID;
                        if(HNC8PLC_SignalList_result[ii + 1].ACTION_ID == "-1")
                        {
                            HNC8PLC_SignalList_result[ii + 1].IsShow = false;//将所有的显示类型采集属性设置为false
                        }
                        else
                        {
                            HNC8PLC_SignalList_result[ii + 1].IsShow = true;//将所有的显示类型采集属性设置为false
                        }
                    }
                }
            }
        }

        //3.为窗体添加Sizechanged事件,调用类自适应方法,完成自适应
        private void PlcForm_SizeChanged(object sender, EventArgs e)
        {
            //记录控件的初始位置和大小后,再最大化
//             asc.controlAutoSize(this);
            this.WindowState = (System.Windows.Forms.FormWindowState)(2);
        }

        private bool DGVUpData1 = false;
        private bool DGVUpData2 = false;
        private String comboBoxPLCJiankongText1;
        private String comboBoxPLCJiankongText2;
        PLC_MITSUBISHI_HNC8.MITSUBISHISignalType[] MITSUBISHIPLC_SignalList_result1;
        PLC_MITSUBISHI_HNC8.MITSUBISHISignalType[] MITSUBISHIPLC_SignalList_result2;
        PLC_MITSUBISHI_HNC8.HNC8SignalType[] HNC8PLC_SignalList_result1;
        PLC_MITSUBISHI_HNC8.HNC8SignalType[] HNC8PLC_SignalList_result2;
        private void timer1_Tick(object sender, EventArgs e)
        {
            if (plc != null && plc.conneted)
            {
                if (labelLinckText.Text != MainForm.LinckedText)
                {
                    pictureBox_LinkState.Image = SCADA.Properties.Resources.top_bar_green;
                    labelLinckText.Text = MainForm.LinckedText;
                }
                if (DGVUpData1)
                {
                    getPlcSingalList2plcDGV(comboBoxPLCJiankongText1, this.plcDGV1, ref MITSUBISHIPLC_SignalList_result1, ref HNC8PLC_SignalList_result1);
                    DGVUpData1 = false;
                }
                if (DGVUpData2)
                {
                    getPlcSingalList2plcDGV(comboBoxPLCJiankongText2, this.plcDGV2, ref MITSUBISHIPLC_SignalList_result2, ref HNC8PLC_SignalList_result2);
                    DGVUpData2 = false;
                }
                UpdatePlcSignal(comboBoxPLCJiankongText1, ref this.plcDGV1, ref MITSUBISHIPLC_SignalList_result1, ref HNC8PLC_SignalList_result1);//刷新X
                UpdatePlcSignal(comboBoxPLCJiankongText2, ref this.plcDGV2, ref MITSUBISHIPLC_SignalList_result2, ref HNC8PLC_SignalList_result2);//刷新Y
            }
            else
            {
                if (labelLinckText.Text != MainForm.UnLinckedText)
                {
                    pictureBox_LinkState.Image = SCADA.Properties.Resources.top_bar_black;
                    labelLinckText.Text = MainForm.UnLinckedText;
                }

            }
        }

        private void UpdatePlcSignal(String Device, ref System.Windows.Forms.DataGridView DGV,
            ref PLC_MITSUBISHI_HNC8.MITSUBISHISignalType[] MITSUBISHIPLC_SignalList_result, ref PLC_MITSUBISHI_HNC8.HNC8SignalType[] HNC8PLC_SignalList_result) 
        {
             if (DGV.Visible)
            {

                for (int ii = 0; ii < DGV.RowCount; ii++)
                {
                    if (DGV.Rows[ii].Displayed)
                    {
                        if (plc.system == m_xmlDociment.PLC_System[0] && MITSUBISHIPLC_SignalList_result != null)//三菱
                        {
                            if (!MITSUBISHIPLC_SignalList_result[ii + 1].IsShow)
                            {
                                MITSUBISHIPLC_SignalList_result[ii + 1].IsShow = true;//开启采集
                            }
                            if (Device == m_xmlDociment.Default_MITSUBISHI_Device1[0] ||
                                Device == m_xmlDociment.Default_MITSUBISHI_Device2[0] ||
                                Device == m_xmlDociment.Default_MITSUBISHI_Device1[3] ||
                                MITSUBISHIPLC_SignalList_result[ii + 1].SubAddress != -1)//X、Y、M、点位
                            {
                                DGV.Rows[ii].Cells[2].Value = MITSUBISHIPLC_SignalList_result[ii + 1].Value;
                            }
                            else
                            {
                                int jinzhi = 0;
                                if (radioButton_shijinzhi.Checked)
                                {
                                    jinzhi = 1;
                                }
                                else if (radioButton_shliujinzhi.Checked)
                                {
                                    jinzhi = 2;
                                }
                                DGV.Rows[ii].Cells[2].Value = GetRegValueChage2string(16, MITSUBISHIPLC_SignalList_result[ii + 1].Value, jinzhi);
                            }
                        }
                        else if (plc.system == m_xmlDociment.PLC_System[1] && HNC8PLC_SignalList_result != null)//hnc8
                        {
                            if (!HNC8PLC_SignalList_result[ii + 1].IsShow)
                            {
                                HNC8PLC_SignalList_result[ii + 1].IsShow = true;//开启采集
                            }

                            if (HNC8PLC_SignalList_result[ii + 1].SubAddress == -1)
                            {
                                int jinzhi = 0;
                                if (radioButton_shijinzhi.Checked)
                                {
                                    jinzhi = 1;
                                }
                                else if (radioButton_shliujinzhi.Checked)
                                {
                                    jinzhi = 2;
                                }
                                DGV.Rows[ii].Cells[2].Value = GetRegValueChage2string(HNC8PLC_SignalList_result[0].Value, HNC8PLC_SignalList_result[ii + 1].Value, jinzhi);
                            }
                            else
                            {
                                DGV.Rows[ii].Cells[2].Value = HNC8PLC_SignalList_result[ii + 1].Value;
                            }
                        }
                    }
                    else
                    {
                        if (plc.system == m_xmlDociment.PLC_System[0] && MITSUBISHIPLC_SignalList_result != null &&
                            MITSUBISHIPLC_SignalList_result[ii + 1].IsShow && MITSUBISHIPLC_SignalList_result[ii + 1].ACTION_ID == "-1"
                            && MITSUBISHIPLC_SignalList_result[ii + 1].IsShow)//三菱
                        {
                            MITSUBISHIPLC_SignalList_result[ii + 1].IsShow = false;
                        }
                        else if (plc.system == m_xmlDociment.PLC_System[1] && MITSUBISHIPLC_SignalList_result != null &&
                            HNC8PLC_SignalList_result[ii + 1].IsShow && HNC8PLC_SignalList_result[ii + 1].ACTION_ID == "-1"
                            && HNC8PLC_SignalList_result[ii + 1].IsShow)
                        {
                            HNC8PLC_SignalList_result[ii + 1].IsShow = false;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 从下位机中获取到对应寄存器值，将其转换为二进制或者十进制或者十六进制
        /// 返回一个字符串
        /// </summary>
        /// <param name="Reg_type">寄存器类型</param>
        /// <param name="Ren_index">寄存器index</param>
        /// <param name="flag">0：二进制，1：十进制，2：十六进制</param>
        private string GetRegValueChage2string(Int32 Reg_Wei, Int32 tmp, Int32 flag)
        {
//             int tmp = 0;
            uint uint_tmp = 0, shi = 0;
            if (Reg_Wei == 8)
            {
                tmp &= 0x00ff;                  //因为X，Y,R及R寄存器是8位的
                uint_tmp = 7;
                shi = 3;
            }
            else if (Reg_Wei == 16)
            {
                tmp &= 0xffff;                  //因为X，Y及R寄存器是16位的
                uint_tmp = 15;
                shi = 5;
            }
            else if (Reg_Wei == 32)
            {
                uint_tmp = (uint)tmp;
                uint_tmp &= 0xffffffff;                  //因为B及R寄存器是32位的
                tmp = (int)uint_tmp;
                uint_tmp = 31;
                shi = 10;
            }
            string str = "";
            if (flag == 0)//二进制
            {
                str = Convert.ToString(tmp, 2);
                str += "B";
                while (str.Length - 1 < uint_tmp + 1)
                    str = "0" + str;
            }
            else if (flag == 1)//十进制
            {
                str = tmp.ToString();
                str += "D";
                while (str.Length - 1 < shi)
                    str = "0" + str;
            }
            else if (flag == 2)//十六进制
            {
                str = Convert.ToString(tmp, 16);
                str += "H";
                while (str.Length - 1 < (uint_tmp + 1) / 4)
                    str = "0" + str;
            }
            return str;
        }


        private void changeDGV()
        {
//             plcDGV1.Columns[0].HeaderText = Localization.Forms["PlcForm"]["input_id"];
//             plcDGV1.Columns[1].HeaderText = Localization.Forms["PlcForm"]["input_name"];
//             plcDGV1.Columns[2].HeaderText = Localization.Forms["PlcForm"]["input_getPicture"];
//             plcDGV2.Columns[0].HeaderText = Localization.Forms["PlcForm"]["output_id"];
//             plcDGV2.Columns[1].HeaderText = Localization.Forms["PlcForm"]["output_name"];
//             plcDGV2.Columns[2].HeaderText = Localization.Forms["PlcForm"]["output_getPicture"];
        }


        protected override void DefWndProc(ref Message m)
        {
            switch (m.Msg)
            {
                case MainForm.LanguageChangeMsg:
//                     Localization.RefreshLanguage(this);
//                     changeDGV();
                    break;
                case MainForm.ClosingMsg:
                    if (OperationButtonArr != null)
                    {
                        for (int ii = 0; ii < PLCStationButtonNameArr2Lenth; ii++)
                        {
                            OperationButtonArr[ii].SetOperationRegBigHandlerFucRuning = false;
                        }
                    }
                    break;
                default:
                    base.DefWndProc(ref m);
                    break;
            }
        }


        private void comboBoxPLCJiankong1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPLCJiankongText1 != comboBoxPLCJiankong1.Text)
            {
                DGVUpData1 = true;
                comboBoxPLCJiankongText1 = comboBoxPLCJiankong1.Text;
            }
        }

        private void comboBoxPLCJiankong2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPLCJiankongText2 != comboBoxPLCJiankong2.Text)
            {
                DGVUpData2 = true;
                comboBoxPLCJiankongText2 = comboBoxPLCJiankong2.Text;
            }
        }


        private void comboBox_PLCStationSelet_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (OperationButtonArr != null)
            {
                InitOperationButton(comboBox_PLCStationSelet.SelectedIndex);
            }
        }

        private void CurrentAlarm_CheckedChanged(object sender, EventArgs e)
        {
            if (PLCDataShare.m_plclist != null && PLCDataShare.m_plclist.Count > 0 && PLCDataShare.m_plclist[0].m_hncPLCCollector != null)
            {
                PLCDataShare.m_plclist[0].m_hncPLCCollector.get_alarm_data(ref dataGridViewalarmdata);
            }
        }

        private void HistoricalAlarm_CheckedChanged(object sender, EventArgs e)
        {
            if (PLCDataShare.m_plclist != null && PLCDataShare.m_plclist.Count > 0 && PLCDataShare.m_plclist[0].m_hncPLCCollector != null)
            {
                PLCDataShare.m_plclist[0].m_hncPLCCollector.get_alarm_histroy_data(ref dataGridViewalarmdata);
            }
        }

        private void button_alarmReFlesh_Click(object sender, EventArgs e)
        {
            if (CurrentAlarm.Checked)
            {
                CurrentAlarm_CheckedChanged(null, null);
            }
            else
            {
                HistoricalAlarm_CheckedChanged(null, null);
            }
        }

        private void dataGridViewalarmdata_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            if (dataGridViewalarmdata.Rows[e.RowIndex].IsNewRow)
                return;
        }

        private void plcDGV1_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            if (plcDGV1.Rows[e.RowIndex].IsNewRow)
                return;
        }

        private void plcDGV2_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            if (plcDGV2.Rows[e.RowIndex].IsNewRow)
                return;
        }
    }
    public class HNC8Reg//8型系统寄存器数据类型
    {
        public String Name;
        public int HncRegType;
        public int index;
        public int bit;
//         public int value;
    }

    public class OperationButton
    {
        private HNC8Reg OperationReg;
        private HNC8Reg StateShowReg;
        private Button m_Button;

        EventHandler<int> SetOperationRegBigHandler;
        EventHandler<int> GetStateShowRegHandler;
        Color[] Bt_bgcoler = { System.Drawing.Color.FromArgb(255, 251, 240), System.Drawing.Color.FromArgb(0, 255, 0) };//按钮颜色

        public OperationButton(Button m_Button)
        {
            this.m_Button = m_Button;
            this.m_Button.Click += new EventHandler(this.m_Button_Click);
            this.m_Button.MouseDown += new System.Windows.Forms.MouseEventHandler(this.m_Button_MouseDown);
            this.m_Button.MouseUp += new System.Windows.Forms.MouseEventHandler(this.m_Button_MouseUp);

            this.m_Button.VisibleChanged += new EventHandler(this.m_Button_VisibleChanged);
            SetOperationRegBigHandler = new EventHandler<int>(this.SetOperationRegBigHandlerFuc);
            GetStateShowRegHandler = new EventHandler<int>(this.GetStateShowRegHandlerFuc);
        }


        public void BindingHnc8Reg(String OperationRegName, String OperationRegInitStr, String StateShowRegName, String StateShowRegInitStr)
        {
            GetStateShowRegHandlerFucRuning = false;
            if (OperationRegInitStr != null)
            {
                OperationReg = new HNC8Reg();
                OperationReg.Name = OperationRegName;
                String[] RegStr = new String[2];
                RegStr[0] = OperationRegInitStr.Substring(0,1);
                RegStr[1] = OperationRegInitStr.Substring(1, OperationRegInitStr.Length - 1);
                OperationReg.HncRegType = PLC_MITSUBISHI_HNC8.GetHncRegType(RegStr[0].ToUpper());
                RegStr = RegStr[1].Split('.');
                OperationReg.index = int.Parse(RegStr[0]);
                if (RegStr.Length == 2)
                {
                    OperationReg.bit = int.Parse(RegStr[1]);
                }
                else
                {
                    OperationReg.bit = -1;
                }
            }
            else
            {
                OperationReg = null;
            }
            if (StateShowRegName != null && StateShowRegInitStr != null)
            {
                StateShowReg = new HNC8Reg();
                StateShowReg.Name = StateShowRegName;
                String[] RegStr = new String[2];
                RegStr[0] = StateShowRegInitStr.Substring(0, 1);
                RegStr[1] = StateShowRegInitStr.Substring(1, StateShowRegInitStr.Length - 1);
                StateShowReg.HncRegType = GetHncRegType(RegStr[0].ToUpper());
                RegStr = RegStr[1].Split('.');
                StateShowReg.index = int.Parse(RegStr[0]);
                if (RegStr.Length == 2)
                {
                    StateShowReg.bit = int.Parse(RegStr[1]);
                }
                else
                {
                    StateShowReg.bit = -1;
                }
            }
            else
            {
                StateShowReg = null;
            }

            if (OperationReg == null && StateShowReg == null)
            {
                m_Button.Visible = false;
            }
            else
            {
                m_Button.Visible = true;

                if(OperationReg != null)
                {
                    m_Button.Text = OperationReg.Name;
                }
                else
                {
                    m_Button.Text = StateShowReg.Name;
                }
                if (GetStateShowRegHandler != null && GetStateShowRegHandlerFucRuning == false)
                {
                    GetStateShowRegHandler.BeginInvoke(null, 200, null, null);
                }
            }
        }


        public int GetHncRegType(String Reg)
        {
            int ret = -1;
            if (Reg == "X")
            {
                ret = 0;
            }
            else if (Reg == "Y")
            {
                ret = 1;
            }
            else if (Reg == "F")
            {
                ret = 2;
            }
            else if (Reg == "G")
            {
                ret = 3;
            }
            else if (Reg == "R")
            {
                ret = 4;
            }
            else if (Reg == "W")
            {
                ret = 5;
            }
            else if (Reg == "D")
            {
                ret = 6;
            }
            else if (Reg == "B")
            {
                ret = 7;
            }
            else if (Reg == "P")
            {
                ret = 8;
            }
            return ret;
        }







        private void m_Button_Click(object sender, EventArgs e)
        {
            if (SetForm.LogIn)
            {
                if (SetOperationRegBigHandler != null && !SetOperationRegBigHandlerFucRuning)
                {
                    SetOperationRegBigHandler.BeginInvoke(null, 5, null, null);
                }
            }
            else
            {
                MessageBox.Show("你的操作权限不够！", " 提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        private void m_Button_VisibleChanged(object sender, EventArgs e)
        {
            if (((Button)sender).Visible)
            {
                if (GetStateShowRegHandler != null && GetStateShowRegHandlerFucRuning == false)
                {
                    GetStateShowRegHandler.BeginInvoke(null, 200, null, null);
                }
            }
        }
        private void m_Button_MouseDown(object sender, MouseEventArgs e)
        {
            if (SetForm.LogIn)
            {
                String[] str4 = PlcForm.PLCStationButtonNameArr[0, 25].Split(';');
                str4 = str4[1].Split('=');//复位
                String[] str5 = PlcForm.PLCStationButtonNameArr[1, 24].Split(';');
                str5 = str5[1].Split('=');//产能清零
                if (m_Button.Text == str4[0] || m_Button.Text == str5[0])
                {
                    if (OperationReg != null && OperationReg.bit != -1)
                    {
                        timerClose = new System.Threading.Timer(new System.Threading.TimerCallback(MouseDownUpHandlerFuc), m_Button, 0, 1000);
                    }
                }
            }
            else
            {
                MessageBox.Show("你的操作权限不够！", " 提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }
        private void m_Button_MouseUp(object sender, MouseEventArgs e)
        {
            if (timerClose != null)
            {
                timerClose.Dispose();
                m_Button.Text = m_Button.Text.Split(':')[0];
            }
            timerClose = null;
        }
        private System.Threading.Timer timerClose;

        private void MouseDownUpHandlerFuc(object obj)
        {
            Button bt = (Button)obj;
            int ii = 0;
            String[] str = m_Button.Text.Split(':');
            if (str.Length == 2)
            {
                if (int.TryParse(str[1].Substring(0, 1), out ii))
                {
                    if (ii == 2)
                    {
                        for (int kk = 0; kk < 50; kk++)
                        {
                            if (PLCDataShare.m_plclist == null || OperationReg == null
                                || PLCDataShare.m_plclist.Count == 0 || PLCDataShare.m_plclist[0].m_hncPLCCollector == null)
                            {
                                break;
                            }
                            if (PLCDataShare.m_plclist[0].m_hncPLCCollector.connectStat)
                            {
                                if (CollectShare.Instance().HNC_RegSetBit(OperationReg.HncRegType, OperationReg.index, OperationReg.bit, Collector.CollectHNCPLC.m_clientNo) == 0)
                                {
                                    break;
                                }
                                else
                                {
                                    System.Threading.Thread.Sleep(10);
                                }
                            }
                        }
                        ThreaSetLaBText(bt, str[0] + ":" + (ii - 1).ToString() + "S");
                    }
                    else if (ii <= 0)
                    {
                        timerClose.Dispose();
                        timerClose = null;
                        for (int kk = 0; kk < 50;kk++ )
                        {
                            if (PLCDataShare.m_plclist == null || OperationReg == null
                                || PLCDataShare.m_plclist.Count == 0 || PLCDataShare.m_plclist[0].m_hncPLCCollector == null)
                            {
                                break;
                            }
                            if (PLCDataShare.m_plclist[0].m_hncPLCCollector.connectStat)
                            {
                                for (int dd = 0; dd < 50; dd++)
                                {
                                    if (CollectShare.Instance().HNC_RegClrBit(OperationReg.HncRegType, OperationReg.index, OperationReg.bit, Collector.CollectHNCPLC.m_clientNo) == 0)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        System.Threading.Thread.Sleep(10);
                                    }
                                }
                            }
                        }
                        ThreaSetLaBText(bt, str[0]);
                    }
                    else
                    {
                        ThreaSetLaBText(bt, str[0] + ":" + (ii - 1).ToString() + "S");
                    }
                }
                else
                {
                    ThreaSetLaBText(bt, str[0] + ":5S");
                }
            }
            else
            {
                ThreaSetLaBText(bt, str[0] + ":5S");
            }

        }



        public bool SetOperationRegBigHandlerFucRuning = false;
        private void SetOperationRegBigHandlerFuc(object obj,int time)
        {
            SetOperationRegBigHandlerFucRuning = true;
            String[] str3 = PlcForm.PLCStationButtonNameArr[1, 14].Split(';');
            str3 = str3[1].Split('=');//设置码垛最高层数
            String[] str4 = PlcForm.PLCStationButtonNameArr[0, 25].Split(';');
            str4 = str4[1].Split('=');//复位
            String[] str5 = PlcForm.PLCStationButtonNameArr[1, 24].Split(';');
            str5 = str5[1].Split('=');//产能清零
            if (m_Button.Text == str4[0] || m_Button.Text == str5[0])
            {
                return;
            }

            if (OperationReg != null && OperationReg.bit != -1)
            {
                for (int ii = 0; ii < 50; ii++)
                {
                    if (PLCDataShare.m_plclist == null || OperationReg == null
                        || PLCDataShare.m_plclist.Count == 0 || PLCDataShare.m_plclist[0].m_hncPLCCollector == null)
                    {
                        break;
                    }
                    if (PLCDataShare.m_plclist[0].m_hncPLCCollector.connectStat)
                    {
//                         String[] str1 = PlcForm.PLCStationButtonNameArr[3,22].Split(';');
//                         str1 = str1[0].Split('=');//是否1出2
//                         String[] str2 = PlcForm.PLCStationButtonNameArr[3,23].Split(';');
//                         str2 = str2[0].Split('=');//是否清洗
//                         String[] str10 = PlcForm.PLCStationButtonNameArr[3,0].Split(';');
//                         str10 = str10[0].Split('=');//上料带启动
//                         String[] str20 = PlcForm.PLCStationButtonNameArr[3,1].Split(';');
//                         str20 = str20[0].Split('=');//下料带启动
// 
// 
//                         if (m_Button.Text == str1[0] || m_Button.Text == str2[0] ||
//                             m_Button.Text == str10[0] || m_Button.Text == str20[0])//特殊处理，每次按按钮取反
                        if (m_Button.Text.Contains("/") || m_Button.Text.Contains("是否"))
                        {
                            int value = 0;
                            if (CollectShare.Instance().HNC_RegGetValue(OperationReg.HncRegType, OperationReg.index, ref value, Collector.CollectHNCPLC.m_clientNo) == 0 )
                            {
                                value = value & (1 << OperationReg.bit);
                                value >>= OperationReg.bit;
                                if (value == 0)
                                {
                                    if (CollectShare.Instance().HNC_RegSetBit(OperationReg.HncRegType, OperationReg.index, OperationReg.bit, Collector.CollectHNCPLC.m_clientNo) == 0)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        System.Threading.Thread.Sleep(time);
                                    }
                                }
                                else
                                {
                                    if (CollectShare.Instance().HNC_RegClrBit(OperationReg.HncRegType, OperationReg.index, OperationReg.bit, Collector.CollectHNCPLC.m_clientNo) == 0)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        System.Threading.Thread.Sleep(time);
                                    }
                                }
                            }
                        }
                        else//按按钮置一
                        {
                            if (CollectShare.Instance().HNC_RegSetBit(OperationReg.HncRegType, OperationReg.index, OperationReg.bit, Collector.CollectHNCPLC.m_clientNo) == 0)
                            {
                                break;
                            }
                            else
                            {
                                System.Threading.Thread.Sleep(time);
                            }
                        }
                    }
                    else
                    {
                        break;
                    }
                }
            }
            else if (m_Button.Text.Contains(str3[0]))//设置层数
            {
                FormSetNumber setform = new FormSetNumber(m_Button.Location);
                setform.Text = m_Button.Text;
                setform.ShowDialog();
                if (setform.Number != 0)
                {
                    if (CollectShare.Instance().HNC_ParamanSetI32((Int32)HNCAPI.HNCDATADEF.PARAMAN_FILE_MAC, 0, OperationReg.index + 300, setform.Number, Collector.CollectHNCPLC.m_clientNo) == 0)
                    {
                        if (CollectShare.Instance().HNC_ParamanSave(Collector.CollectHNCPLC.m_clientNo) == 0)
                        {
                            ThreaSetLaBText(m_Button, str3[0] + "=" + setform.Number.ToString());
                        }
                    }
                }
            }
            SetOperationRegBigHandlerFucRuning = false;
        }

        public bool GetStateShowRegHandlerFucRuning = false;
        private void GetStateShowRegHandlerFuc(object obj, int time)
        {
            GetStateShowRegHandlerFucRuning = true;
            if (StateShowReg != null)
            {
                while (true)
                {
                    if (!m_Button.Visible || !GetStateShowRegHandlerFucRuning || StateShowReg == null
                        || PLCDataShare.m_plclist == null || PLCDataShare.m_plclist.Count == 0
                        || PLCDataShare.m_plclist[0].m_hncPLCCollector == null)
                    {
                        break;
                    }
                    if (PLCDataShare.m_plclist[0].m_hncPLCCollector.connectStat)
                    {
                        int value = 0;
                        if (StateShowReg.HncRegType == 8)//P参数
                        {
                            if (CollectShare.Instance().HNC_ParamanGetI32((Int32)HNCAPI.HNCDATADEF.PARAMAN_FILE_MAC, 0, StateShowReg.index + 300, ref value, Collector.CollectHNCPLC.m_clientNo) == 0)//P参数从300开始偏移
                            {
                                String[] str = m_Button.Text.Split('=');
                                ThreaSetLaBText(m_Button, str[0] + "=" + value);
                                break;
                            }
                        }
                        else
                        {
                            if (CollectShare.Instance().HNC_RegGetValue(StateShowReg.HncRegType, StateShowReg.index, ref value, Collector.CollectHNCPLC.m_clientNo) == 0)
                            {
                                if (StateShowReg != null && StateShowReg.bit == -1 && value > -1000 && value < 1000)//显示值
                                {
                                    String[] str = m_Button.Text.Split('=');
                                    ThreaSetLaBText(m_Button, str[0] + "=" + value);
                                }
                                else if (StateShowReg != null && StateShowReg.bit != -1)//显示IO状态
                                {
                                    value = value & (1 << StateShowReg.bit);
                                    value >>= StateShowReg.bit;
                                    if (value == 0)
                                    {
                                        if (m_Button.BackColor != Bt_bgcoler[0])
                                        {
                                            m_Button.BackColor = Bt_bgcoler[0];
                                        }
                                    }
                                    else
                                    {
                                        if (m_Button.BackColor != Bt_bgcoler[1])
                                        {
                                            m_Button.BackColor = Bt_bgcoler[1];
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (m_Button.BackColor != Bt_bgcoler[0])
                        {
                            m_Button.BackColor = Bt_bgcoler[0];
                        }
                    }
                    System.Threading.Thread.Sleep(time);
                }
            }
            GetStateShowRegHandlerFucRuning = false;
        }

        /// <summary>
        /// 委托设置文本控件显示
        /// </summary>
        /// <param name="LB"></param>
        /// <param name="str"></param>
        private void ThreaSetLaBText(Button bt, String str)
        {
            if (bt.InvokeRequired)//等待异步
            {
                // 当一个控件的InvokeRequired属性值为真时，说明有一个创建它以外的线程想访问它
                Action<string> actionDelegate = (x) => { bt.Text = x; };
                bt.Invoke(actionDelegate, str);
            }
            else
            {
                bt.Text = str;
            }
        }

    }
}
